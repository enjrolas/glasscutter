{"name":"Glasscutter","tagline":"color graphics slicer.  Slices 3D files into an array of images to be printed onto transparent acrylic, looking glass-style","body":"Glasscutter is a program that slices color 3D objects into a set of\r\nflat slices.\r\n\r\n\r\n**A brief rundown of the program**\r\n\r\n[Here's the Glasscutter UI](http://imgur.com/3wQSfQg)\r\n\r\nThere are three main sections of the UI:\r\n\r\n**The box dimensions**\r\n\r\nWhen all the slices are stacked up, they will form a box of this\r\ndimension.\r\n\r\n**Slicing axis/slice thickness**\r\n\r\nThe slices will be normal to the slicing axis.  The slices have a\r\ncertain thickness -- this is the thickness of the material that the\r\nslices will be printed on.\r\n\r\nThere is a number of microslices that make up each slice.  These\r\nmicroslices will all be printed together onto their slice.  Think of\r\nthem like contour lines on a topological map.  The closer the contour\r\nlines get, the more detail they can represent on the map.\r\n\r\nThe next version of Glasscutter, currently in beta, replaces\r\nmicroslices by drawing a polygon onto the slice if the triangle is\r\nflat enough that it lies within the thickness of a slice.\r\n\r\n**Output Options**\r\n\r\nGlasscutter currently supports two export formats:  png and pdf.  \r\n\r\nThe options at the top are all for the pdf export -- output page\r\ndimensions, columns, rows and margin.  The pdf will contain a\r\nset of dimensionally accurate pages that can be directly printed and cut.\r\nAn example pdf export is [here](http://imgur.com/Lzw1tOf), sliced from\r\na colored version of [this thingiverse thing](http://www.thingiverse.com/thing:32477)\r\n\r\nPage dimensions set the size of the page, rows and margins set the\r\nnumber of slices that go on a page, spacing is the distance between\r\nthe slices and margin is the margin between the slices and the edge of\r\nthe page.\r\n\r\nThe bottom options are for the png export.  The resolution sets, well,\r\nthe resolution of the png in dpi.  'Overlap' prints microslices from\r\nthe neighboring slices onto the current slice.  The value is the\r\nnumber of microslices from the neighboring slice that will be printed\r\non the next slice.\r\n\r\nFinally, in the center, along the right side, there are two checkboxes to set pdf and png\r\nexports.  If no boxes are checked, the program will just slice the\r\nmodel and show a preview, but not export anything.  If either box is\r\nchecked, the program will export that format.\r\n\r\n**Language**\r\n\r\nGlasscutter is written in Processing, which is based on Java.  The\r\nProcessing environment is open-source and free for download from\r\nhttp://www.processing.org \r\n\r\n**Dependencies:**\r\n\r\nGlasscutter requires the ControlP5 library for graphical user\r\ninterfaces, available for download [here.](http://www.sojamo.de/libraries/controlP5/)\r\nTo install, download the library from the above website and unzip it.\r\nThere's a folder that contains your Processing sketches -- for mac\r\nusers, the default location is in ~/Documents/Processing, and for\r\nwindows users it's in My Documents/Processing.  Inside that folder,\r\nthere's another folder called 'libraries'.  Drag the unzipped\r\ndirectory that you downloaded into the libraries folder and restart\r\nprocessing.  You're good to go!\r\n\r\n**License**\r\n\r\nThis work is licensed under the Creative Commons Attribution-ShareAlike\r\n3.0 Unported License.\r\nThe summary and full text of the license are viewable [here](http://creativecommons.org/licenses/by-sa/3.0/deed.en_US)\r\n\r\n\r\nThis version of Glasscutter can only slice ascii-formatted,\r\nvertex-colored PLY files.  Fortunately, the open-source software\r\n[Meshlab](http://meshlab.sourceforge.net/) can convert just about any 3D\r\nfile format into ascii-formatted, vertex-colored PLYs.  Here's how:\r\n\r\n**Vertex Coloring**\r\n\r\nThere are two ways to color 3D files:\r\nvertex coloring and texture-mapping.  In texture mapping, there is an\r\nimage file that contains the flattened \"skin\" of the 3D object.  Each\r\nvertex in the mesh contains a co-ordinate from the texture that\r\ndescribes how to wrap the skin around the mesh.  Glasscutter doesn't\r\nhandle this, yet.  If you want to help make this happen, you would\r\nbe a rock star hero.\r\n\r\nVertex coloring is the other approach.  In this approach, each vertex\r\nin the mesh has a certain color.  When the renderer draws the\r\ntriangles in the mesh, it'll color each triangle with a linear\r\ngradient between the vertex colors along the triangle's surface.  This\r\nis a much simpler way to color a mesh, but it has a limitation:  the\r\nresolution of a vertex-colored mesh is based on the number of vertices\r\nin the mesh.  You can add more vertices to increase the resolution,\r\nbut it makes the 3D file larger and more difficult to handle.  Texture\r\nmapping scales much better.  \r\n\r\nYou can use meshlab to convert a texture-mapped mesh to a\r\nvertex-colored mesh.  Open the 3D file in Meshlab, and then go to to\r\nFilters->Color Creation and Processing->Transfer Color: Texture to\r\nVertex.  Give it a second, and your 3D object will now be\r\nvertex-colored.  You'll still have to export the PLY file, though.\r\nRead below to see how.\r\n\r\n\r\n**Exporting PLYs**\r\n\r\nExporting PLYs is simple, but there are a few things that you have to\r\nget right.  To export a file as a PLY, first open the file in\r\nMeshlab.  Then, go to File->Export Mesh As... and select \"Stanford\r\nPolygon File Format (*.ply)\" in the \"files of type\" drop-down menu.\r\n \r\n[The following dialog box will appear](http://imgur.com/WbxmJFI)\r\n\r\nOnly click the \"Color\" box under 'Vert.'  All other checkboxes should\r\nbe unclicked, _especially_ the 'Binary Encoding' checkbox --\r\nunchecking this ensures that the PLY file will be in human-readable\r\nASCII format.  At the bottom left of the checkbox, the radio button\r\nfor 'All' should be selected.  \r\nClick 'Save', and you'll have a PLY file that Glasscutter can handle.\r\n\r\n\r\n*********************************************************************\r\n\r\nGlasscutter is a work in progress.  We'd welcome contributions -- if\r\nyou'd like to get involved in the code, send a pull request.  If you\r\nfork it and build something cool, tell us about it at\r\nalex@artiswrong.com\r\n\r\nIn particular, we'd love help adjusting the GUI and adding support for\r\ntexture mapping.  If you're interested in helping with either of\r\nthese, get in touch.\r\n\r\nThere's a few other features that we're adding.  Stay tuned for...\r\n\r\nUpcoming features:\r\n\r\n* support for rendering polygonal surfaces rather than stacking\r\n microslices together\r\n\r\n* OBJ import\r\n\r\n* support for texture mapping\r\n\r\n* integrated png tiling\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}